Do not run migrations, we will be using a custom user model.
admin-admin@admin.com-1

to add API:
1. install django rest framework
2. add it to installed apps
3. add permission config
4. add urls
5. add serializer
6. add views

to add CORS (protecting the connection from unknown and external clients using headers)
1. install django-cors-headers
2. add it to installed_apps
3. add it to middlewares, above commonmiddleware
4. add whitelist var

to add CSRF_PROTECTION for cross-domain requests:
add CSRF_TRUSTED_ORIGINS = ["http://localhost:3000"] to settings.py

adding permissions:
permissions can be added in 3 layers: project level, view level and model level
allowany was an example of project level.

testuser-hello123*

- Adding custom permission:
add a permissions.py file to api
create a class that will inherit from permissions.BasePermission (import from rest_framework)
the methods of this class, must return true or false
import and add the custom permission to permission_classes of a view (generic, and the value must be tuble)


NOTE: it is advised not to use session-based authentication in apis that will have multiple front-ends.

- Adding User Authentication:
there are three major approaches:
1. Basic Authentication: sends along authentication credientials in every request via http headers
2. Session based authentication: credientials are sent once, if valid, a session object is created, 
the session will be held in database, and a session id will be held in client side (as a cookie).
note: Django's default choice is a combination of the two above.
3. Token Authentication: credientials are sent once, a unique token is generated, client will hold it as cookie or localStorage.
the server will not keep a record of the token, just whether it is valid or not.
JWT (json web tokens) are newer form of token that we use in this book

first step: is to add new authentication config vars to settings.py
REST_FRAMEWORK = {
    "DEFAULT_PERMISSION_CLASSES": [
            "rest_framework.permissions.IsAuthenticated",
        ],
    "DEFAULT_AUTHENTICATION_CLASSES": [ # new
        "rest_framework.authentication.SessionAuthentication",
        "rest_framework.authentication.BasicAuthentication",
    ],
}

now, update it to use tokens
change "rest_framework.authentication.BasePermission to TokenAuthentication
(means that we will be using tokens instead of sessions)

second step: add authtoken app to installed_apps (this app is included in DRF but must be explicitly added)
third step: since installed_apps has changed, database must be synced. run migrations (only migrate)

we'll be relying on two third party apps for user authentication (dj-rest-auth in combination with django-allauth)
first dj-rest-auth, we will add log in, log out, and password reset api endpoints.
pip install dj-rest-auth==2.1.11 and then add it to installed apps.
add dj-rest-auth routes to main urls.py

- to add user registration, we will use django-allauth
pip install django-allauth=0.48.0
several new config vars must be added to installed apps,
also django-allauth needs to be added to TEMPLATES config and EMAIL_BACKEND must be updated. (email backend may not exist)
also SITE_ID must be updated. (sites framework, is django's way of hosting multiple websites in the same project)
migrate the database.
add new routes to main urls.py.

- viewsets and routers
a viewset can replace multiple related views
and a router can automatically generate urls
we will be making two new api endpoints for listing users and viewing individual users using viewsets and routers

adding api endpoint is always a three step process:
new serializer
new view
new url route

edit serializer.py by importing custom user model and creating a serializer for it
add two views to views.py in posts
and then two routes in urls.py in posts

currently there are four views for posts app, two for posts and two for users.
by using viewsets, we will then have two, one for posts, and one for users.

- Adding schema and documentation (automated)
OpenAPI specification is the best standard way to document api.
we will use drf-spectacular package to generate an OpenAPI 3 schema.

install: pip install drf-spectacular
add it to installed apps.
also it needs to be registered in REST_FRAMEWORK config var.
also it needs its own config var to be added to settings.py: SPECTACULAR_SETTINGS.
then we can use a management command to generate a standalone schema file with a given name.
python manage.py spectacular --file schema.yml.
(this file is hard to read for humans but very understandable for computers)
this file can also be dynamically generated in as url in browser itself. (check main urls.py file)

for adding documentation, drf-spectacular supports two tools: Redoc and SwaggerUI
just import them and add them to main urls.py file.

- Production Deployment:
Environment variables are good way to store secure and sensitive information, that should not be sent to source control.

there are many packages for this purpose but we will use environs package (it has special config for django)
pip install environs[django]
set it up in settings.py (requires two conifg vars), just import Env and create an instance of it and make it read env files
then create an .env file and add it to gitignore